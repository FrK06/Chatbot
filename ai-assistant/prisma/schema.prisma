// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  name              String?
  password          String?        // Hashed password for credential auth
  tier              String         @default("FREE")
  stripeCustomerId  String?       
  emailVerified     DateTime?
  resetToken        String?        // Password reset token
  resetTokenExpiry  DateTime?      // When the reset token expires
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  conversations     Conversation[]
  messages          Message[]
  apiUsage          ApiUsage[]
  accounts          Account[]
  sessions          Session[]

  @@index([email])
  @@map("users")
}

model Conversation {
  id            String    @id @default(uuid())
  title         String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  messages      Message[]
  isDeleted     Boolean   @default(false)  // Soft deletion for GDPR
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([isDeleted])
  @@map("conversations")
}

model Message {
  id              String       @id @default(uuid())
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  role            String       // "user" or "assistant"
  content         String       @db.Text
  metadata        Json?        // For storing reasoning, tools used, etc.
  createdAt       DateTime     @default(now())

  @@index([conversationId])
  @@map("messages")
}

model ApiUsage {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  endpoint  String    // Which API was called
  model     String?   // Which model was used
  tokens    Int       // Token count
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("api_usage")
}

// For NextAuth.js integration
model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}